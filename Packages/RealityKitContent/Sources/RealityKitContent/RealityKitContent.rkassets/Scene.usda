#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["antibodyProtein_complex", "healthyCell_complex", "killCell", "CancerCells", "killCell_1", "killCell_2", "bloodVessel", "bloodCell", "extraCancerCells"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )
    float3 xformOp:translate = (0, 1.02, -1)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def "antibodyProtein_complex" (
        active = true
        references = @ADC/antibodyProtein_complex.usdc@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.14831775, 0.15171753, 0.056256525)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0.010366622, -0.002161257, 0.0013168352)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            uniform token info:id = "RealityKitContent.GestureComponent"
            bool pivotOnDrag = 0
        }
    }

    def "healthyCell_complex" (
        active = true
        references = @ADC/healthyCell_complex.usdc@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.75, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.6709686, 0.6865606, 0.65466005)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0.0011808872, -0.0039972365, 0.0034950078)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_BreathComponent"
        {
            float duration = 5
            uniform token info:id = "RealityKitContent.BreathComponent"
        }
    }

    def RealityKitTimeline "killCell"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "default subtree animation"
                int blendLayer = 500
                double duration = 0.3333333432674408
                uniform token info:id = "57004F2E-DD54-41E8-A9C5-16228E5BE03F"
                double loopCount = 1
                bool separateAnimatedValue = 1
                double startTime = 0.06596980851870583
                rel target = </Root/CancerCells/cancerCell_complex>

                def RealityKitStruct "handoffType"
                {
                    token type = "defaultHandoffType"
                }
            }

            def RealityKitAction "Disable_Entity"
            {
                string actionKind = "disable"
                double duration = 0
                uniform token info:id = "22751843-390B-4CEF-8FBB-C78255EC2393"
                double startTime = 0.3993031518861467
                rel target = </Root/CancerCells/cancerCell_complex>
            }
        }
    }

    def Xform "CancerCells" (
        active = true
    )
    {
        def "cancerCell_complex" (
            active = true
            references = @ADC/cancerCell_complex.usdc@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.75, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.8030057, 0.9011064, 0.78866863)
                    float radius = 0.30758446
                    token shapeType = "Sphere"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.003299117, 0.0056425035, -0.013024569)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = </Root/CancerCells/cancerCell_complex/OnCollision>
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnCollision"
            {
                rel actions = </Root/CancerCells/cancerCell_complex/OnCollision/Action>
                uniform bool exclusive
                rel triggers = </Root/CancerCells/cancerCell_complex/OnCollision/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/CancerCells/cancerCell_complex>
                    rel colliders = </Root/antibodyProtein_complex>
                    token info:id = "Collide"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/killCell>
                    rel animationLibraryKeyOverrideKey = </Root/CancerCells/cancerCell_complex/OnCollision/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def RealityKitComponent "AnimationLibrary"
            {
                uniform token info:id = "RealityKit.AnimationLibrary"

                def RealityKitAnimationFile "cancerCell_complex"
                {
                    uniform bool looping = 1
                    uniform string name = "cancerCell_complex"
                }

                def RealityKitAnimationFile "default_subtree_animation"
                {
                    uniform bool looping = 1
                    uniform string name = "default subtree animation"
                }
            }

            def RealityKitComponent "HierarchicalFade"
            {
                uniform token info:id = "RealityKit.HierarchicalFade"
            }
        }

        def "cancerCell_complex_1" (
            active = true
            references = @ADC/cancerCell_complex.usdc@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1.2308033, 1.2308033, 1.2308033)
            float3 xformOp:translate = (-0.6925937, -0.25302625, -0.69149566)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.8030057, 0.9011064, 0.78866863)
                    float radius = 0.32
                    token shapeType = "Sphere"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.003299117, 0.0056425035, -0.013024569)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "AnimationLibrary"
            {
                uniform token info:id = "RealityKit.AnimationLibrary"

                def RealityKitAnimationFile "cancerCell_complex"
                {
                    uniform bool looping = 1
                    uniform string name = "cancerCell_complex"
                }

                def RealityKitAnimationFile "default_subtree_animation"
                {
                    uniform bool looping = 1
                    uniform string name = "default subtree animation"
                }
            }

            def RealityKitComponent "HierarchicalFade"
            {
                uniform token info:id = "RealityKit.HierarchicalFade"
            }

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = </Root/CancerCells/cancerCell_complex_1/OnCollision>
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnCollision"
            {
                rel actions = </Root/CancerCells/cancerCell_complex_1/OnCollision/Action>
                uniform bool exclusive
                rel triggers = </Root/CancerCells/cancerCell_complex_1/OnCollision/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/CancerCells/cancerCell_complex_1>
                    rel colliders = </Root/antibodyProtein_complex>
                    token info:id = "Collide"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/killCell_1>
                    rel animationLibraryKeyOverrideKey = </Root/CancerCells/cancerCell_complex_1/OnCollision/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }
        }

        def "cancerCell_complex_2" (
            active = true
            references = @ADC/cancerCell_complex.usdc@
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.67537415, 0.67537415, 0.67537415)
            float3 xformOp:translate = (-0.5955372, -0.3655784, 0.38841057)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.8030057, 0.9011064, 0.78866863)
                    float radius = 0.3
                    token shapeType = "Sphere"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.003299117, 0.0056425035, -0.013024569)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "AnimationLibrary"
            {
                uniform token info:id = "RealityKit.AnimationLibrary"

                def RealityKitAnimationFile "cancerCell_complex"
                {
                    uniform bool looping = 1
                    uniform string name = "cancerCell_complex"
                }

                def RealityKitAnimationFile "default_subtree_animation"
                {
                    uniform bool looping = 1
                    uniform string name = "default subtree animation"
                }
            }

            def RealityKitComponent "HierarchicalFade"
            {
                uniform token info:id = "RealityKit.HierarchicalFade"
            }

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = </Root/CancerCells/cancerCell_complex_2/OnCollision>
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnCollision"
            {
                rel actions = </Root/CancerCells/cancerCell_complex_2/OnCollision/Action>
                uniform bool exclusive
                rel triggers = </Root/CancerCells/cancerCell_complex_2/OnCollision/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/CancerCells/cancerCell_complex_2>
                    rel colliders = </Root/antibodyProtein_complex>
                    token info:id = "Collide"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/killCell_2>
                    rel animationLibraryKeyOverrideKey = </Root/CancerCells/cancerCell_complex_2/OnCollision/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }
        }
    }

    def RealityKitTimeline "killCell_1"
    {
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "default subtree animation"
                int blendLayer = 500
                double duration = 0.3333333432674408
                uniform token info:id = "57004F2E-DD54-41E8-A9C5-16228E5BE03F"
                double loopCount = 1
                bool separateAnimatedValue = 1
                double startTime = 0.06596980851870583
                rel target = </Root/CancerCells/cancerCell_complex_1>

                def RealityKitStruct "handoffType"
                {
                    token type = "defaultHandoffType"
                }
            }

            def RealityKitAction "Disable_Entity"
            {
                string actionKind = "disable"
                double duration = 0
                uniform token info:id = "22751843-390B-4CEF-8FBB-C78255EC2393"
                double startTime = 0.3993031518861467
                rel target = </Root/CancerCells/cancerCell_complex_1>
            }
        }
    }

    def RealityKitTimeline "killCell_2"
    {
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "default subtree animation"
                int blendLayer = 500
                double duration = 0.3333333432674408
                uniform token info:id = "57004F2E-DD54-41E8-A9C5-16228E5BE03F"
                double loopCount = 1
                bool separateAnimatedValue = 1
                double startTime = 0.06596980851870583
                rel target = </Root/CancerCells/cancerCell_complex_2>

                def RealityKitStruct "handoffType"
                {
                    token type = "defaultHandoffType"
                }
            }

            def RealityKitAction "Disable_Entity"
            {
                string actionKind = "disable"
                double duration = 0
                uniform token info:id = "22751843-390B-4CEF-8FBB-C78255EC2393"
                double startTime = 0.3993031518861467
                rel target = </Root/CancerCells/cancerCell_complex_2>
            }
        }
    }

    def "bloodVessel" (
        active = false
        customData = {
            float3 rotationEulerHint = (-1.5707963, 0, 0)
        }
        references = @Blood Vessel/bloodVessel.usdc@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
        float3 xformOp:scale = (5.1968455, 5.1968455, 5.1968455)
        float3 xformOp:translate = (0, -1.02, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "bloodCell" (
        active = false
        customData = {
            float3 rotationEulerHint = (-1.9391028, -2.2351742e-7, 0.4619928)
        }
        references = @Blood Vessel/bloodCell.usdc@
    )
    {
        quatf xformOp:orient = (0.5506447, -0.8027288, -0.18879755, 0.12950857)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.31507403, -0.7572228, 0.64405566)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitCustomComponent "RealityKitContent_TurnTableComponent"
        {
            uniform token info:id = "RealityKitContent.TurnTableComponent"
        }
    }

    def Xform "extraCancerCells" (
        active = true
    )
    {
        reorder nameChildren = ["cancerCell_Lung", "cancerCell_Breast", "cancerCell_Colon"]
        float3 xformOp:translate = (0, 0, -0.7421888)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "cancerCell_Colon" (
            active = true
            prepend references = @ADC/CancerCells/colon/cancerCell_Colon.usdc@
        )
        {
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.40900052, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "cancerCell_Breast" (
            active = true
            prepend references = @ADC/CancerCells/breast/cancerCell_Breast.usdc@
        )
        {
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.5564771, 0.40900004, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "cancerCell_Lung" (
            active = true
            prepend references = @ADC/CancerCells/lung/cancerCell_Lung.usdc@
        )
        {
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.6285466, 0.40900004, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def "bloodVessel_v004" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        prepend references = @Blood Vessel/bloodVessel_v004.usdc@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (5, 5, 5)
        float3 xformOp:translate = (0, -1.02, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "_materials"
        {
            over "bloodVessel_mat_002"
            {
                token outputs:mtlx:surface.connect = </Root/bloodVessel_v004/_materials/bloodVessel_mat_002/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/bloodVessel_v004/_materials/bloodVessel_mat_002/Principled_BSDF_001.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (417.06055, 125.73008)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 19

                over "Principled_BSDF_001" (
                    active = false
                )
                {
                }

                def Shader "PreviewSurface"
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    float inputs:clearcoat
                    float inputs:clearcoatRoughness
                    color3f inputs:diffuseColor.connect = </Root/bloodVessel_v004/_materials/bloodVessel_mat_002/Image.outputs:out>
                    color3f inputs:emissiveColor.connect = </Root/bloodVessel_v004/_materials/bloodVessel_mat_002/Image_1.outputs:out>
                    float inputs:ior
                    float3 inputs:normal.connect = </Root/bloodVessel_v004/_materials/bloodVessel_mat_002/Image_2.outputs:out>
                    float inputs:occlusion
                    float inputs:opacity
                    float inputs:roughness
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-255, 105)
                    int ui:nodegraph:node:stackingOrder = 5
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
                }

                def Shader "Image"
                {
                    uniform token info:id = "ND_image_color3"
                    asset inputs:file = @Blood Vessel/textures/Baked.png@
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (-776.98047, -155.0664)
                    int ui:nodegraph:node:stackingOrder = 4
                }

                def Shader "Image_1"
                {
                    uniform token info:id = "ND_image_color3"
                    asset inputs:file = @Blood Vessel/textures/txt_bloodVessel_mat_Emissive_baked.jpg@
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (-1024.5642, 573.0487)
                    int ui:nodegraph:node:stackingOrder = 15
                }

                def Shader "Image_2"
                {
                    uniform token info:id = "ND_image_vector3"
                    asset inputs:file = @Blood Vessel/textures/txt_bloodVessel_mat_Normal_baked.png@
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (-1165.7136, 68.844574)
                    int ui:nodegraph:node:stackingOrder = 17
                }
            }
        }

        over "bloodVessel_curvedEnds"
        {
            over "bloodVessel_low_001"
            {
            }
        }
    }
}

